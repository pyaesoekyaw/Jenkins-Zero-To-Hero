pipeline {
  agent {
    docker {
      image 'pyae5/maven-java17-agent:v1'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
      alwaysPull true // Keep this to ensure latest agent image
    }
  }
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        // This stage is mostly a placeholder now, as the SCM checkout is done by the pipeline agent implicitly.
        // The actual code will be available in the workspace.
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://44.201.205.23:9000/"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "pyae5/ultimate-cicd:${BUILD_NUMBER}" // Use your own username here
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh '''
                cd java-maven-sonar-argocd-helm-k8s/spring-boot-app
                docker build -t ${DOCKER_IMAGE} .
            '''
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    // --- THIS IS THE CRUCIAL CHANGE FOR THIS STAGE ---
    stage('Update Deployment File') {
      agent {
        label 'master' // Run this stage on the Jenkins controller (built-in node)
                       // Or 'built-in' for older Jenkins versions.
      }
      environment {
          GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
          GIT_USER_NAME = "pyaesoekyaw" // Use your GitHub username here
      }
      steps {
          withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
              sh '''
                  # Navigate to the root of the cloned repository for Git operations
                  # This path should be correct when running on the master agent
                  cd /var/lib/jenkins/workspace/pipedlfj/java-maven-sonar-argocd-helm-k8s/

                  echo "Current directory for git commands on master: $(pwd)"
                  ls -la .git/ || echo ".git directory still not found on master." # This should now work!

                  git config user.email "pyaesoekyaw1123@gmail.com" # Use your actual email
                  git config user.name "Pyae Soe Kyaw"             # Use your actual name

                  BUILD_NUMBER=${BUILD_NUMBER}

                  # Path to deployment.yml is relative to the directory we cd'd into
                  sed -i "s/replaceImageTag/${BUILD_NUMBER}/g" spring-boot-app-manifests/deployment.yml
                  
                  git add spring-boot-app-manifests/deployment.yml
                  git commit -m "Update deployment image to version ${BUILD_NUMBER} [skip ci]" # [skip ci] to prevent infinite build loop
                  
                  # Push changes using the GITHUB_TOKEN
                  # This pushes to the original repo owner (iam-veeramalla) if you have permission
                  # If you want to push to your fork, use:
                  # git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                  git push https://${GITHUB_TOKEN}@github.com/iam-veeramalla/${GIT_REPO_NAME} HEAD:main # Pushing to original repo
              '''
          }
      }
    }
  }
}
